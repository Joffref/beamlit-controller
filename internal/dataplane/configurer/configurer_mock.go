// Code generated by MockGen. DO NOT EDIT.
// Source: configurer.go
//
// Generated by this command:
//
//	mockgen -source=configurer.go -destination=configurer_mock.go -package=configurer Configurer
//

// Package configurer is a generated GoMock package.
package configurer

import (
	context "context"
	reflect "reflect"

	deployment "github.com/beamlit/operator/api/v1alpha1/deployment"
	gomock "go.uber.org/mock/gomock"
)

// MockConfigurer is a mock of Configurer interface.
type MockConfigurer struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurerMockRecorder
}

// MockConfigurerMockRecorder is the mock recorder for MockConfigurer.
type MockConfigurerMockRecorder struct {
	mock *MockConfigurer
}

// NewMockConfigurer creates a new mock instance.
func NewMockConfigurer(ctrl *gomock.Controller) *MockConfigurer {
	mock := &MockConfigurer{ctrl: ctrl}
	mock.recorder = &MockConfigurerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigurer) EXPECT() *MockConfigurerMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *MockConfigurer) Configure(ctx context.Context, service *deployment.ServiceReference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", ctx, service)
	ret0, _ := ret[0].(error)
	return ret0
}

// Configure indicates an expected call of Configure.
func (mr *MockConfigurerMockRecorder) Configure(ctx, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockConfigurer)(nil).Configure), ctx, service)
}

// GetLocalBeamlitService mocks base method.
func (m *MockConfigurer) GetLocalBeamlitService(ctx context.Context, service *deployment.ServiceReference) (*deployment.ServiceReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalBeamlitService", ctx, service)
	ret0, _ := ret[0].(*deployment.ServiceReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalBeamlitService indicates an expected call of GetLocalBeamlitService.
func (mr *MockConfigurerMockRecorder) GetLocalBeamlitService(ctx, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalBeamlitService", reflect.TypeOf((*MockConfigurer)(nil).GetLocalBeamlitService), ctx, service)
}

// Start mocks base method.
func (m *MockConfigurer) Start(ctx context.Context, gatewayService *deployment.ServiceReference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, gatewayService)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockConfigurerMockRecorder) Start(ctx, gatewayService any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockConfigurer)(nil).Start), ctx, gatewayService)
}

// Unconfigure mocks base method.
func (m *MockConfigurer) Unconfigure(ctx context.Context, service *deployment.ServiceReference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unconfigure", ctx, service)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unconfigure indicates an expected call of Unconfigure.
func (mr *MockConfigurerMockRecorder) Unconfigure(ctx, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unconfigure", reflect.TypeOf((*MockConfigurer)(nil).Unconfigure), ctx, service)
}
